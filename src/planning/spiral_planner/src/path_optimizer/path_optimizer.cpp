#include "path_optimizer/path_optimizer.h"

using namespace std::placeholders;

namespace planning {

///////////////////////////////////////////////////////////////////////////////
// Helper Functions
///////////////////////////////////////////////////////////////////////////////

std::vector<double> linspace(double a, double b, int num, bool endpoint) {
  if (a > b)
    return linspace(b, a, num, endpoint);

  std::vector<double> res;
  double offset = endpoint ? (b - a) / (num - 1) : (b - a) / num;
  double val = a;
  while (val < b) {
    res.push_back(val);
    val += offset;
  }
  return res;
}

std::vector<double> diff(std::vector<double> x) {
  std::vector<double> xd(x.size() - 1, 0);
  for (int i = 0; i < x.size() - 1; i++) {
    xd[i] = x[i + 1] - x[i];
  }
  return xd;
}

std::vector<double> integrate(std::vector<double> y, std::vector<double> x) {
  if (y.size() != x.size())
    return {};

  std::vector<double> y_int;
  std::vector<double> xd = diff(x);

  double sum = 0;
  y_int.push_back(sum);
  for (int i = 0; i < y.size() - 1; i++) {
    sum += xd[i] * (y[i] + y[i + 1]) / 2;
    y_int.push_back(sum);
  }

  return y_int;
}

std::vector<double> multiply_w_scalar(double val, std::vector<double> vec) {
  std::vector<double> res(vec);
  for (int i = 0; i < res.size(); i++) {
    res[i] *= val;
  }
  return res;
}

std::vector<double> add_w_scalar(double val, std::vector<double> vec) {
  std::vector<double> res(vec);
  for (int i = 0; i < res.size(); i++) {
    res[i] += val;
  }
  return res;
}

std::vector<double> add(std::vector<double> a, std::vector<double> b) {
  if (a.size() != b.size())
    return {};
  for (int i = 0; i < a.size(); i++) {
    a[i] = a[i] + b[i];
  }
  return a;
}

std::vector<double> subtract(std::vector<double> a, std::vector<double> b) {
  if (a.size() != b.size())
    return {};
  for (int i = 0; i < a.size(); i++) {
    a[i] = a[i] - b[i];
  }
  return a;
}

double norm(std::vector<double> a) {
  double sum = 0;
  for (int i = 0; i < a.size(); i++) {
    sum += a[i] * a[i];
  }
  return sqrt(sum);
}

///////////////////////////////////////////////////////////////////////////////
// class PathOptimizer
///////////////////////////////////////////////////////////////////////////////

/**
 * Constructor
 */
PathOptimizer::PathOptimizer() {}

/////////////////////////////////////////////////////////////
// PARAMETER OPTIMIZATION FOR POLYNOMIAL SPIRAL
/////////////////////////////////////////////////////////////
std::vector<std::vector<double>> PathOptimizer::optimizeSpiral(double x_f, double y_f,
                                                     double t_f) {
  xf = x_f;
  yf = y_f;
  tf = t_f;

  double sf_0 = norm({xf, yf});

  ///////////////////////////////////////////
  // Minimize with L-BFGS-B algorithm
  ///////////////////////////////////////////

  // init bounds
  Vector lb(3), ub(3);
  lb << -0.5, -0.5, sf_0;
  ub << 0.5, 0.5, INF;

  // init solver with bounds
  LBFGSB solver(lb, ub);

  // create starting point
  Vector x_opt = Vector::Zero(3, 1);
  x_opt << 0.0, 0.0, sf_0;

  // solve the problem
  solver.Solve(x_opt, std::bind(&PathOptimizer::objective, this, _1),
               std::bind(&PathOptimizer::objectiveGrad, this, _1, _2));

  std::vector<double> x_solved(3);
  x_solved[0] = solver.XOpt[0];
  x_solved[1] = solver.XOpt[1];
  x_solved[2] = solver.XOpt[2];

  // std::cout << "x solved: " << std::endl;
  // std::cout << "  " << solver.XOpt[0] << std::endl;
  // std::cout << "  " << solver.XOpt[1] << std::endl;
  // std::cout << "  " << solver.XOpt[2] << std::endl;

  std::vector<std::vector<double>> spiral = sampleSpiral(x_solved);

  return spiral;
}

/////////////////////////////////////////////////////////////
// SAMPLE SPIRAL PATH
// Samples a set of points along the spiral given the optimization
// parameters.
/////////////////////////////////////////////////////////////
std::vector<std::vector<double>> PathOptimizer::sampleSpiral(std::vector<double> p_in) {
  std::vector<double> p = {0.0, p_in[0], p_in[1], 0.0,
                      p_in[2]}; // recall p0 and p3 are set to 0
                                // and p4 is the final arc length
  double a = p[0];
  double b = -(11.0 * p[0] / 2.0 - 9.0 * p[1] + 9.0 * p[2] / 2.0 - p[3]) / p[4];
  double c = (9.0 * p[0] - 45.0 * p[1] / 2.0 + 18.0 * p[2] - 9.0 * p[3] / 2.0) /
             pow(p[4], 2);
  double d = -(9.0 * p[0] / 2.0 - 27.0 * p[1] / 2.0 + 27.0 * p[2] / 2.0 -
               9.0 * p[3] / 2.0) /
             pow(p[4], 3);

  std::vector<double> ss = linspace(0.0, p[4], p[4] / INTERP_DISTANCE_RES);

  std::vector<double> ts = thetaf(a, b, c, d, ss);

  std::vector<double> cos_ts, sin_ts;
  for (int i = 0; i < ts.size(); i++) {
    cos_ts.push_back(cos(ts[i]));
    sin_ts.push_back(sin(ts[i]));
  }

  std::vector<double> xs = integrate(cos_ts, ss);
  std::vector<double> ys = integrate(sin_ts, ss);

  std::vector<std::vector<double>> res;
  for (int i = 0; i < xs.size(); i++) {
    std::vector<double> pp = {xs[i], ys[i], ts[i]};
    res.push_back(pp);
  }

  return res;
}

// COMPUTE LIST OF THETAS
std::vector<double> PathOptimizer::thetaf(double a, double b, double c, double d,
                                     std::vector<double> ss) {
  std::vector<double> thetas;
  for (int i = 0; i < ss.size(); i++) {
    double s = ss[i];
    double theta =
        a * s + b / 2 * pow(s, 2) + c / 3 * pow(s, 3) + d / 4 * pow(s, 4);
    thetas.push_back(theta);
  }
  return thetas;
}

/////////////////////////////////////////////////////////////
// BELOW ARE THE FUNCTIONS USED FOR THE OPTIMIZER.
/////////////////////////////////////////////////////////////

double PathOptimizer::objective(const Vector &x) {
  std::vector<double> p = {0.0, x[0], x[1], 0.0, x[2]};
  return fbe(p) + 25 * (fxf(p) + fyf(p)) + 30 * ftf(p);
}

void PathOptimizer::objectiveGrad(const Vector &x, Vector &grad) {
  std::vector<double> p = {0.0, x[0], x[1], 0.0, x[2]};
  std::vector<double> temp, temp_x, temp_y, temp_t;

  temp_x = multiply_w_scalar(25, fxfGrad(p));
  temp_y = multiply_w_scalar(25, fyfGrad(p));
  temp_t = multiply_w_scalar(30, ftfGrad(p));

  temp = add(add(add(fbeGrad(p), temp_x), temp_y), temp_t);

  if (temp.empty())
    return;
  grad = Vector::Zero(temp.size());
  grad << temp[0], temp[1], temp[2];
}

double PathOptimizer::fxf(std::vector<double> p) {
  double t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
  double t10, t11, t12, t13, t14, t15;
  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 =
      xf - p[4] *
               (cos(p[0] * p[4] - p[4] * t9 * (1.0 / 4.0) -
                    p[4] * t13 * (1.0 / 3.0) + p[4] * t14 * (1.0 / 2.0)) +
                cos(p[0] * p[4] * (1.0 / 2.0) - p[4] * t9 * (1.0 / 6.4E1) -
                    p[4] * t13 * (1.0 / 2.4E1) + p[4] * t14 * (1.0 / 8.0)) *
                    2.0 +
                cos(p[0] * p[4] * (3.0 / 4.0) - p[4] * t9 * 7.91015625E-2 -
                    p[4] * t13 * (9.0 / 6.4E1) + p[4] * t14 * (9.0 / 3.2E1)) *
                    2.0 +
                cos(p[0] * p[4] * (1.0 / 4.0) - p[4] * t9 * 9.765625E-4 -
                    p[4] * t13 * (1.0 / 1.92E2) + p[4] * t14 * (1.0 / 3.2E1)) *
                    2.0 +
                cos(p[0] * p[4] * (3.0 / 8.0) - p[4] * t9 * 4.94384765625E-3 -
                    p[4] * t13 * (9.0 / 5.12E2) + p[4] * t14 * (9.0 / 1.28E2)) *
                    4.0 +
                cos(p[0] * p[4] * (1.0 / 8.0) - p[4] * t9 * 6.103515625E-5 -
                    p[4] * t13 * 6.510416666666667E-4 +
                    p[4] * t14 * (1.0 / 1.28E2)) *
                    4.0 +
                cos(p[0] * p[4] * (5.0 / 8.0) - p[4] * t9 * 3.814697265625E-2 -
                    p[4] * t13 * 8.138020833333333E-2 +
                    p[4] * t14 * (2.5E1 / 1.28E2)) *
                    4.0 +
                cos(p[0] * p[4] * (7.0 / 8.0) - p[4] * t9 * 1.4654541015625E-1 -
                    p[4] * t13 * 2.233072916666667E-1 +
                    p[4] * t14 * (4.9E1 / 1.28E2)) *
                    4.0 +
                1.0) *
               (1.0 / 2.4E1);
  t0 = t15 * t15;
  return t0;
}

std::vector<double> PathOptimizer::fxfGrad(std::vector<double> p) {
  std::vector<double> grad(3, 0);

  double t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
  double t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
  double t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
  double t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
  double t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
  double t50, t51, t52, t53, t54;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[0] * p[4] * (3.0 / 4.0);
  t18 = p[0] * p[4] * (1.0 / 4.0);
  t19 = p[0] * p[4] * (3.0 / 8.0);
  t20 = p[0] * p[4] * (1.0 / 8.0);
  t21 = p[0] * p[4] * (5.0 / 8.0);
  t22 = p[0] * p[4] * (7.0 / 8.0);
  t0 = p[4] *
       (xf -
        p[4] *
            (cos(t15 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0) +
                 p[4] * t14 * (1.0 / 2.0)) +
             cos(t16 - p[4] * t9 * (1.0 / 6.4E1) - p[4] * t13 * (1.0 / 2.4E1) +
                 p[4] * t14 * (1.0 / 8.0)) *
                 2.0 +
             cos(t17 - p[4] * t9 * 7.91015625E-2 - p[4] * t13 * (9.0 / 6.4E1) +
                 p[4] * t14 * (9.0 / 3.2E1)) *
                 2.0 +
             cos(t18 - p[4] * t9 * 9.765625E-4 - p[4] * t13 * (1.0 / 1.92E2) +
                 p[4] * t14 * (1.0 / 3.2E1)) *
                 2.0 +
             cos(t19 - p[4] * t9 * 4.94384765625E-3 -
                 p[4] * t13 * (9.0 / 5.12E2) + p[4] * t14 * (9.0 / 1.28E2)) *
                 4.0 +
             cos(t20 - p[4] * t9 * 6.103515625E-5 -
                 p[4] * t13 * 6.510416666666667E-4 +
                 p[4] * t14 * (1.0 / 1.28E2)) *
                 4.0 +
             cos(t21 - p[4] * t9 * 3.814697265625E-2 -
                 p[4] * t13 * 8.138020833333333E-2 +
                 p[4] * t14 * (2.5E1 / 1.28E2)) *
                 4.0 +
             cos(t22 - p[4] * t9 * 1.4654541015625E-1 -
                 p[4] * t13 * 2.233072916666667E-1 +
                 p[4] * t14 * (4.9E1 / 1.28E2)) *
                 4.0 +
             1.0) *
            (1.0 / 2.4E1)) *
       (p[4] *
            sin(t15 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0) +
                p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 2.0)) *
            (3.0 / 8.0) +
        p[4] *
            sin(t16 - p[4] * t9 * (1.0 / 6.4E1) - p[4] * t13 * (1.0 / 2.4E1) +
                p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 8.0)) *
            (5.1E1 / 6.4E1) +
        p[4] *
            sin(t17 - p[4] * t9 * 7.91015625E-2 - p[4] * t13 * (9.0 / 6.4E1) +
                p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 3.2E1)) *
            8.701171875E-1 +
        p[4] *
            sin(t18 - p[4] * t9 * 9.765625E-4 - p[4] * t13 * (1.0 / 1.92E2) +
                p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 3.2E1)) *
            3.544921875E-1 +
        p[4] *
            sin(t19 - p[4] * t9 * 4.94384765625E-3 -
                p[4] * t13 * (9.0 / 5.12E2) +
                p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 1.28E2)) *
            1.2161865234375 +
        p[4] *
            sin(t20 - p[4] * t9 * 6.103515625E-5 -
                p[4] * t13 * 6.510416666666667E-4 +
                p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 1.28E2)) *
            2.259521484375E-1 +
        p[4] *
            sin(t21 - p[4] * t9 * 3.814697265625E-2 -
                p[4] * t13 * 8.138020833333333E-2 +
                p[4] * (p[3] - t2 + t3 - t4) * (2.5E1 / 1.28E2)) *
            1.7669677734375 +
        p[4] *
            sin(t22 - p[4] * t9 * 1.4654541015625E-1 -
                p[4] * t13 * 2.233072916666667E-1 +
                p[4] * (p[3] - t2 + t3 - t4) * (4.9E1 / 1.28E2)) *
            1.5970458984375) *
       (1.0 / 1.2E1);
  grad[0] = t0;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[4] * t14 * (1.0 / 8.0);
  t18 = t16 + t17 - p[4] * t9 * (1.0 / 6.4E1) - p[4] * t13 * (1.0 / 2.4E1);
  t19 = p[0] * p[4] * (3.0 / 4.0);
  t20 = p[0] * p[4] * (1.0 / 4.0);
  t21 = p[4] * t14 * (1.0 / 3.2E1);
  t22 = t20 + t21 - p[4] * t9 * 9.765625E-4 - p[4] * t13 * (1.0 / 1.92E2);
  t23 = p[0] * p[4] * (3.0 / 8.0);
  t24 = p[4] * t14 * (9.0 / 1.28E2);
  t25 = t23 + t24 - p[4] * t9 * 4.94384765625E-3 - p[4] * t13 * (9.0 / 5.12E2);
  t26 = p[0] * p[4] * (1.0 / 8.0);
  t27 = p[4] * t14 * (1.0 / 1.28E2);
  t28 = t26 + t27 - p[4] * t9 * 6.103515625E-5 -
        p[4] * t13 * 6.510416666666667E-4;
  t29 = p[0] * p[4] * (5.0 / 8.0);
  t30 = p[0] * p[4] * (7.0 / 8.0);
  t0 = p[4] *
       (xf - p[4] *
                 (cos(t15 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0) +
                      p[4] * t14 * (1.0 / 2.0)) +
                  cos(t19 - p[4] * t9 * 7.91015625E-2 -
                      p[4] * t13 * (9.0 / 6.4E1) + p[4] * t14 * (9.0 / 3.2E1)) *
                      2.0 +
                  cos(t29 - p[4] * t9 * 3.814697265625E-2 -
                      p[4] * t13 * 8.138020833333333E-2 +
                      p[4] * t14 * (2.5E1 / 1.28E2)) *
                      4.0 +
                  cos(t30 - p[4] * t9 * 1.4654541015625E-1 -
                      p[4] * t13 * 2.233072916666667E-1 +
                      p[4] * t14 * (4.9E1 / 1.28E2)) *
                      4.0 +
                  cos(t18) * 2.0 + cos(t22) * 2.0 + cos(t25) * 4.0 +
                  cos(t28) * 4.0 + 1.0) *
                 (1.0 / 2.4E1)) *
       (p[4] *
            sin(t15 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0) +
                p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 2.0)) *
            (3.0 / 8.0) +
        p[4] *
            sin(t19 - p[4] * t9 * 7.91015625E-2 - p[4] * t13 * (9.0 / 6.4E1) +
                p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 3.2E1)) *
            3.955078125E-1 +
        p[4] *
            sin(t29 - p[4] * t9 * 3.814697265625E-2 -
                p[4] * t13 * 8.138020833333333E-2 +
                p[4] * (p[3] - t2 + t3 - t4) * (2.5E1 / 1.28E2)) *
            2.838134765625E-1 +
        p[4] *
            sin(t30 - p[4] * t9 * 1.4654541015625E-1 -
                p[4] * t13 * 2.233072916666667E-1 +
                p[4] * (p[3] - t2 + t3 - t4) * (4.9E1 / 1.28E2)) *
            1.2740478515625 -
        p[4] * sin(t18) * (3.0 / 6.4E1) - p[4] * sin(t22) * 1.201171875E-1 -
        p[4] * sin(t25) * 2.669677734375E-1 -
        p[4] * sin(t28) * 9.70458984375E-2) *
       (1.0 / 1.2E1);
  grad[1] = t0;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[0] * p[4] * (3.0 / 4.0);
  t18 = p[0] * p[4] * (1.0 / 4.0);
  t19 = p[0] * p[4] * (3.0 / 8.0);
  t20 = p[0] * p[4] * (1.0 / 8.0);
  t21 = p[0] * p[4] * (5.0 / 8.0);
  t22 = p[0] * p[4] * (7.0 / 8.0);
  t23 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 2.0);
  t39 = p[4] * t9 * (1.0 / 4.0);
  t40 = p[4] * t13 * (1.0 / 3.0);
  t24 = t15 + t23 - t39 - t40;
  t25 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 8.0);
  t41 = p[4] * t9 * (1.0 / 6.4E1);
  t42 = p[4] * t13 * (1.0 / 2.4E1);
  t26 = t16 + t25 - t41 - t42;
  t27 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 3.2E1);
  t45 = p[4] * t9 * 9.765625E-4;
  t46 = p[4] * t13 * (1.0 / 1.92E2);
  t28 = t18 + t27 - t45 - t46;
  t29 = p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 3.2E1);
  t43 = p[4] * t9 * 7.91015625E-2;
  t44 = p[4] * t13 * (9.0 / 6.4E1);
  t30 = t17 + t29 - t43 - t44;
  t31 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 1.28E2);
  t49 = p[4] * t9 * 6.103515625E-5;
  t50 = p[4] * t13 * 6.510416666666667E-4;
  t32 = t20 + t31 - t49 - t50;
  t33 = p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 1.28E2);
  t47 = p[4] * t9 * 4.94384765625E-3;
  t48 = p[4] * t13 * (9.0 / 5.12E2);
  t34 = t19 + t33 - t47 - t48;
  t35 = p[4] * (p[3] - t2 + t3 - t4) * (2.5E1 / 1.28E2);
  t51 = p[4] * t9 * 3.814697265625E-2;
  t52 = p[4] * t13 * 8.138020833333333E-2;
  t36 = t21 + t35 - t51 - t52;
  t37 = p[4] * (p[3] - t2 + t3 - t4) * (4.9E1 / 1.28E2);
  t53 = p[4] * t9 * 1.4654541015625E-1;
  t54 = p[4] * t13 * 2.233072916666667E-1;
  t38 = t22 + t37 - t53 - t54;
  t0 = (xf -
        p[4] *
            (cos(t15 - t39 - t40 + p[4] * t14 * (1.0 / 2.0)) +
             cos(t16 - t41 - t42 + p[4] * t14 * (1.0 / 8.0)) * 2.0 +
             cos(t18 - t45 - t46 + p[4] * t14 * (1.0 / 3.2E1)) * 2.0 +
             cos(t17 - t43 - t44 + p[4] * t14 * (9.0 / 3.2E1)) * 2.0 +
             cos(t20 - t49 - t50 + p[4] * t14 * (1.0 / 1.28E2)) * 4.0 +
             cos(t19 - t47 - t48 + p[4] * t14 * (9.0 / 1.28E2)) * 4.0 +
             cos(t21 - t51 - t52 + p[4] * t14 * (2.5E1 / 1.28E2)) * 4.0 +
             cos(t22 - t53 - t54 + p[4] * t14 * (4.9E1 / 1.28E2)) * 4.0 + 1.0) *
            (1.0 / 2.4E1)) *
       (cos(t24) * (1.0 / 2.4E1) + cos(t26) * (1.0 / 1.2E1) +
        cos(t28) * (1.0 / 1.2E1) + cos(t30) * (1.0 / 1.2E1) +
        cos(t32) * (1.0 / 6.0) + cos(t34) * (1.0 / 6.0) +
        cos(t36) * (1.0 / 6.0) + cos(t38) * (1.0 / 6.0) -
        p[4] *
            (sin(t24) * (p[0] * (1.0 / 8.0) + p[1] * (3.0 / 8.0) +
                         p[2] * (3.0 / 8.0) + p[3] * (1.0 / 8.0)) +
             sin(t26) *
                 (p[0] * (1.5E1 / 1.28E2) + p[1] * (5.1E1 / 1.28E2) -
                  p[2] * (3.0 / 1.28E2) + p[3] * (1.0 / 1.28E2)) *
                 2.0 +
             sin(t28) *
                 (p[0] * 1.2060546875E-1 + p[1] * 1.7724609375E-1 -
                  p[2] * 6.005859375E-2 + p[3] * 1.220703125E-2) *
                 2.0 +
             sin(t30) *
                 (p[0] * 1.1279296875E-1 + p[1] * 4.3505859375E-1 +
                  p[2] * 1.9775390625E-1 + p[3] * 4.39453125E-3) *
                 2.0 +
             sin(t32) *
                 (p[0] * 8.7615966796875E-2 + p[1] * 5.6488037109375E-2 -
                  p[2] * 2.4261474609375E-2 + p[3] * 5.157470703125E-3) *
                 4.0 +
             sin(t34) *
                 (p[0] * 1.24237060546875E-1 + p[1] * 3.04046630859375E-1 -
                  p[2] * 6.6741943359375E-2 + p[3] * 1.3458251953125E-2) *
                 4.0 +
             sin(t36) *
                 (p[0] * 1.11541748046875E-1 + p[1] * 4.41741943359375E-1 +
                  p[2] * 7.0953369140625E-2 + p[3] * 7.62939453125E-4) *
                 4.0 +
             sin(t38) *
                 (p[0] * 1.19842529296875E-1 + p[1] * 3.99261474609375E-1 +
                  p[2] * 3.18511962890625E-1 + p[3] * 3.7384033203125E-2) *
                 4.0) *
            (1.0 / 2.4E1) +
        1.0 / 2.4E1) *
       -2.0;
  grad[2] = t0;

  return grad;
}

double PathOptimizer::fyf(std::vector<double> p) {
  double t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
  double t10, t11, t12, t13, t14, t15;
  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;

  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 =
      yf - p[4] *
               (sin(p[0] * p[4] - p[4] * t9 * (1.0 / 4.0) -
                    p[4] * t13 * (1.0 / 3.0) + p[4] * t14 * (1.0 / 2.0)) +
                sin(p[0] * p[4] * (1.0 / 2.0) - p[4] * t9 * (1.0 / 6.4E1) -
                    p[4] * t13 * (1.0 / 2.4E1) + p[4] * t14 * (1.0 / 8.0)) *
                    2.0 +
                sin(p[0] * p[4] * (3.0 / 4.0) - p[4] * t9 * 7.91015625E-2 -
                    p[4] * t13 * (9.0 / 6.4E1) + p[4] * t14 * (9.0 / 3.2E1)) *
                    2.0 +
                sin(p[0] * p[4] * (1.0 / 4.0) - p[4] * t9 * 9.765625E-4 -
                    p[4] * t13 * (1.0 / 1.92E2) + p[4] * t14 * (1.0 / 3.2E1)) *
                    2.0 +
                sin(p[0] * p[4] * (3.0 / 8.0) - p[4] * t9 * 4.94384765625E-3 -
                    p[4] * t13 * (9.0 / 5.12E2) + p[4] * t14 * (9.0 / 1.28E2)) *
                    4.0 +
                sin(p[0] * p[4] * (1.0 / 8.0) - p[4] * t9 * 6.103515625E-5 -
                    p[4] * t13 * 6.510416666666667E-4 +
                    p[4] * t14 * (1.0 / 1.28E2)) *
                    4.0 +
                sin(p[0] * p[4] * (5.0 / 8.0) - p[4] * t9 * 3.814697265625E-2 -
                    p[4] * t13 * 8.138020833333333E-2 +
                    p[4] * t14 * (2.5E1 / 1.28E2)) *
                    4.0 +
                sin(p[0] * p[4] * (7.0 / 8.0) - p[4] * t9 * 1.4654541015625E-1 -
                    p[4] * t13 * 2.233072916666667E-1 +
                    p[4] * t14 * (4.9E1 / 1.28E2)) *
                    4.0) *
               (1.0 / 2.4E1);

  t0 = t15 * t15;
  return t0;
}

std::vector<double> PathOptimizer::fyfGrad(std::vector<double> p) {
  std::vector<double> grad(3, 0);

  double t0, t1, t2, t3, t4, t5, t6, t7, t8, t9;
  double t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
  double t20, t21, t22, t23, t24, t25, t26, t27, t28, t29;
  double t30, t31, t32, t33, t34, t35, t36, t37, t38, t39;
  double t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
  double t50, t51, t52, t53, t54;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[0] * p[4] * (3.0 / 4.0);
  t18 = p[0] * p[4] * (1.0 / 4.0);
  t19 = p[0] * p[4] * (3.0 / 8.0);
  t20 = p[0] * p[4] * (1.0 / 8.0);
  t21 = p[0] * p[4] * (5.0 / 8.0);
  t22 = p[0] * p[4] * (7.0 / 8.0);
  t23 = p[4] * t14 * (1.0 / 2.0);
  t24 = t15 + t23 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0);
  t25 = p[4] * t14 * (1.0 / 8.0);
  t26 = t16 + t25 - p[4] * t9 * (1.0 / 6.4E1) - p[4] * t13 * (1.0 / 2.4E1);
  t27 = p[4] * t14 * (9.0 / 3.2E1);
  t28 = t17 + t27 - p[4] * t9 * 7.91015625E-2 - p[4] * t13 * (9.0 / 6.4E1);
  t29 = p[4] * t14 * (1.0 / 3.2E1);
  t30 = t18 + t29 - p[4] * t9 * 9.765625E-4 - p[4] * t13 * (1.0 / 1.92E2);
  t31 = p[4] * t14 * (9.0 / 1.28E2);
  t32 = t19 + t31 - p[4] * t9 * 4.94384765625E-3 - p[4] * t13 * (9.0 / 5.12E2);
  t33 = p[4] * t14 * (1.0 / 1.28E2);
  t34 = t20 + t33 - p[4] * t9 * 6.103515625E-5 -
        p[4] * t13 * 6.510416666666667E-4;
  t35 = p[4] * t14 * (2.5E1 / 1.28E2);
  t36 = t21 + t35 - p[4] * t9 * 3.814697265625E-2 -
        p[4] * t13 * 8.138020833333333E-2;
  t37 = p[4] * t14 * (4.9E1 / 1.28E2);
  t38 = t22 + t37 - p[4] * t9 * 1.4654541015625E-1 -
        p[4] * t13 * 2.233072916666667E-1;
  t0 =
      p[4] *
      (yf -
       p[4] *
           (sin(t24) + sin(t26) * 2.0 + sin(t28) * 2.0 + sin(t30) * 2.0 +
            sin(t32) * 4.0 + sin(t34) * 4.0 + sin(t36) * 4.0 + sin(t38) * 4.0) *
           (1.0 / 2.4E1)) *
      (p[4] * cos(t24) * (3.0 / 8.0) + p[4] * cos(t26) * (5.1E1 / 6.4E1) +
       p[4] * cos(t28) * 8.701171875E-1 + p[4] * cos(t30) * 3.544921875E-1 +
       p[4] * cos(t32) * 1.2161865234375 + p[4] * cos(t34) * 2.259521484375E-1 +
       p[4] * cos(t36) * 1.7669677734375 + p[4] * cos(t38) * 1.5970458984375) *
      (-1.0 / 1.2E1);
  grad[0] = t0;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[4] * t14 * (1.0 / 8.0);
  t18 = t16 + t17 - p[4] * t9 * (1.0 / 6.4E1) - p[4] * t13 * (1.0 / 2.4E1);
  t19 = p[0] * p[4] * (3.0 / 4.0);
  t20 = p[0] * p[4] * (1.0 / 4.0);
  t21 = p[4] * t14 * (1.0 / 3.2E1);
  t22 = t20 + t21 - p[4] * t9 * 9.765625E-4 - p[4] * t13 * (1.0 / 1.92E2);
  t23 = p[0] * p[4] * (3.0 / 8.0);
  t24 = p[4] * t14 * (9.0 / 1.28E2);
  t25 = t23 + t24 - p[4] * t9 * 4.94384765625E-3 - p[4] * t13 * (9.0 / 5.12E2);
  t26 = p[0] * p[4] * (1.0 / 8.0);
  t27 = p[4] * t14 * (1.0 / 1.28E2);
  t28 = t26 + t27 - p[4] * t9 * 6.103515625E-5 -
        p[4] * t13 * 6.510416666666667E-4;
  t29 = p[0] * p[4] * (5.0 / 8.0);
  t30 = p[0] * p[4] * (7.0 / 8.0);
  t31 = p[4] * t14 * (1.0 / 2.0);
  t32 = t15 + t31 - p[4] * t9 * (1.0 / 4.0) - p[4] * t13 * (1.0 / 3.0);
  t33 = p[4] * t14 * (9.0 / 3.2E1);
  t34 = t19 + t33 - p[4] * t9 * 7.91015625E-2 - p[4] * t13 * (9.0 / 6.4E1);
  t35 = p[4] * t14 * (2.5E1 / 1.28E2);
  t36 = t29 + t35 - p[4] * t9 * 3.814697265625E-2 -
        p[4] * t13 * 8.138020833333333E-2;
  t37 = p[4] * t14 * (4.9E1 / 1.28E2);
  t38 = t30 + t37 - p[4] * t9 * 1.4654541015625E-1 -
        p[4] * t13 * 2.233072916666667E-1;
  t0 = p[4] *
       (yf -
        p[4] *
            (sin(t18) * 2.0 + sin(t22) * 2.0 + sin(t25) * 4.0 + sin(t28) * 4.0 +
             sin(t32) + sin(t34) * 2.0 + sin(t36) * 4.0 + sin(t38) * 4.0) *
            (1.0 / 2.4E1)) *
       (p[4] * cos(t18) * (3.0 / 6.4E1) + p[4] * cos(t22) * 1.201171875E-1 +
        p[4] * cos(t25) * 2.669677734375E-1 +
        p[4] * cos(t28) * 9.70458984375E-2 - p[4] * cos(t32) * (3.0 / 8.0) -
        p[4] * cos(t34) * 3.955078125E-1 - p[4] * cos(t36) * 2.838134765625E-1 -
        p[4] * cos(t38) * 1.2740478515625) *
       (1.0 / 1.2E1);
  grad[1] = t0;

  t2 = p[0] * (1.1E1 / 2.0);
  t3 = p[1] * 9.0;
  t4 = p[2] * (9.0 / 2.0);
  t5 = p[0] * (9.0 / 2.0);
  t6 = p[1] * (2.7E1 / 2.0);
  t7 = p[2] * (2.7E1 / 2.0);
  t8 = p[3] * (9.0 / 2.0);
  t9 = t5 - t6 + t7 - t8;
  t10 = p[0] * 9.0;
  t11 = p[1] * (4.5E1 / 2.0);
  t12 = p[2] * 1.8E1;
  t13 = t8 - t10 + t11 - t12;
  t14 = p[3] - t2 + t3 - t4;
  t15 = p[0] * p[4];
  t16 = p[0] * p[4] * (1.0 / 2.0);
  t17 = p[0] * p[4] * (3.0 / 4.0);
  t18 = p[0] * p[4] * (1.0 / 4.0);
  t19 = p[0] * p[4] * (3.0 / 8.0);
  t20 = p[0] * p[4] * (1.0 / 8.0);
  t21 = p[0] * p[4] * (5.0 / 8.0);
  t22 = p[0] * p[4] * (7.0 / 8.0);
  t23 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 2.0);
  t39 = p[4] * t9 * (1.0 / 4.0);
  t40 = p[4] * t13 * (1.0 / 3.0);
  t24 = t15 + t23 - t39 - t40;
  t25 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 8.0);
  t41 = p[4] * t9 * (1.0 / 6.4E1);
  t42 = p[4] * t13 * (1.0 / 2.4E1);
  t26 = t16 + t25 - t41 - t42;
  t27 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 3.2E1);
  t45 = p[4] * t9 * 9.765625E-4;
  t46 = p[4] * t13 * (1.0 / 1.92E2);
  t28 = t18 + t27 - t45 - t46;
  t29 = p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 3.2E1);
  t43 = p[4] * t9 * 7.91015625E-2;
  t44 = p[4] * t13 * (9.0 / 6.4E1);
  t30 = t17 + t29 - t43 - t44;
  t31 = p[4] * (p[3] - t2 + t3 - t4) * (1.0 / 1.28E2);
  t49 = p[4] * t9 * 6.103515625E-5;
  t50 = p[4] * t13 * 6.510416666666667E-4;
  t32 = t20 + t31 - t49 - t50;
  t33 = p[4] * (p[3] - t2 + t3 - t4) * (9.0 / 1.28E2);
  t47 = p[4] * t9 * 4.94384765625E-3;
  t48 = p[4] * t13 * (9.0 / 5.12E2);
  t34 = t19 + t33 - t47 - t48;
  t35 = p[4] * (p[3] - t2 + t3 - t4) * (2.5E1 / 1.28E2);
  t51 = p[4] * t9 * 3.814697265625E-2;
  t52 = p[4] * t13 * 8.138020833333333E-2;
  t36 = t21 + t35 - t51 - t52;
  t37 = p[4] * (p[3] - t2 + t3 - t4) * (4.9E1 / 1.28E2);
  t53 = p[4] * t9 * 1.4654541015625E-1;
  t54 = p[4] * t13 * 2.233072916666667E-1;
  t38 = t22 + t37 - t53 - t54;
  t0 = (yf - p[4] *
                 (sin(t15 - t39 - t40 + p[4] * t14 * (1.0 / 2.0)) +
                  sin(t16 - t41 - t42 + p[4] * t14 * (1.0 / 8.0)) * 2.0 +
                  sin(t18 - t45 - t46 + p[4] * t14 * (1.0 / 3.2E1)) * 2.0 +
                  sin(t17 - t43 - t44 + p[4] * t14 * (9.0 / 3.2E1)) * 2.0 +
                  sin(t20 - t49 - t50 + p[4] * t14 * (1.0 / 1.28E2)) * 4.0 +
                  sin(t19 - t47 - t48 + p[4] * t14 * (9.0 / 1.28E2)) * 4.0 +
                  sin(t21 - t51 - t52 + p[4] * t14 * (2.5E1 / 1.28E2)) * 4.0 +
                  sin(t22 - t53 - t54 + p[4] * t14 * (4.9E1 / 1.28E2)) * 4.0) *
                 (1.0 / 2.4E1)) *
       (sin(t24) * (1.0 / 2.4E1) + sin(t26) * (1.0 / 1.2E1) +
        sin(t28) * (1.0 / 1.2E1) + sin(t30) * (1.0 / 1.2E1) +
        sin(t32) * (1.0 / 6.0) + sin(t34) * (1.0 / 6.0) +
        sin(t36) * (1.0 / 6.0) + sin(t38) * (1.0 / 6.0) +
        p[4] *
            (cos(t24) * (p[0] * (1.0 / 8.0) + p[1] * (3.0 / 8.0) +
                         p[2] * (3.0 / 8.0) + p[3] * (1.0 / 8.0)) +
             cos(t26) *
                 (p[0] * (1.5E1 / 1.28E2) + p[1] * (5.1E1 / 1.28E2) -
                  p[2] * (3.0 / 1.28E2) + p[3] * (1.0 / 1.28E2)) *
                 2.0 +
             cos(t28) *
                 (p[0] * 1.2060546875E-1 + p[1] * 1.7724609375E-1 -
                  p[2] * 6.005859375E-2 + p[3] * 1.220703125E-2) *
                 2.0 +
             cos(t30) *
                 (p[0] * 1.1279296875E-1 + p[1] * 4.3505859375E-1 +
                  p[2] * 1.9775390625E-1 + p[3] * 4.39453125E-3) *
                 2.0 +
             cos(t32) *
                 (p[0] * 8.7615966796875E-2 + p[1] * 5.6488037109375E-2 -
                  p[2] * 2.4261474609375E-2 + p[3] * 5.157470703125E-3) *
                 4.0 +
             cos(t34) *
                 (p[0] * 1.24237060546875E-1 + p[1] * 3.04046630859375E-1 -
                  p[2] * 6.6741943359375E-2 + p[3] * 1.3458251953125E-2) *
                 4.0 +
             cos(t36) *
                 (p[0] * 1.11541748046875E-1 + p[1] * 4.41741943359375E-1 +
                  p[2] * 7.0953369140625E-2 + p[3] * 7.62939453125E-4) *
                 4.0 +
             cos(t38) *
                 (p[0] * 1.19842529296875E-1 + p[1] * 3.99261474609375E-1 +
                  p[2] * 3.18511962890625E-1 + p[3] * 3.7384033203125E-2) *
                 4.0) *
            (1.0 / 2.4E1)) *
       -2.0;
  grad[2] = t0;

  return grad;
}

double PathOptimizer::ftf(std::vector<double> p) {
  double tmp =
      tf - p[0] * p[4] +
      p[4] * (p[0] * (1.1E1 / 2.0) - p[1] * 9.0 + p[2] * (9.0 / 2.0) - p[3]) *
          (1.0 / 2.0) +
      p[4] *
          (p[0] * (9.0 / 2.0) - p[1] * (2.7E1 / 2.0) + p[2] * (2.7E1 / 2.0) -
           p[3] * (9.0 / 2.0)) *
          (1.0 / 4.0) -
      p[4] *
          (p[0] * 9.0 - p[1] * (4.5E1 / 2.0) + p[2] * 1.8E1 -
           p[3] * (9.0 / 2.0)) *
          (1.0 / 3.0);
  return tmp * tmp;
}

std::vector<double> PathOptimizer::ftfGrad(std::vector<double> p) {
  std::vector<double> grad(3, 0);
  grad[0] =
      p[4] *
      (tf - p[0] * p[4] +
       p[4] * (p[0] * (1.1E1 / 2.0) - p[1] * 9.0 + p[2] * (9.0 / 2.0) - p[3]) *
           (1.0 / 2.0) +
       p[4] *
           (p[0] * (9.0 / 2.0) - p[1] * (2.7E1 / 2.0) + p[2] * (2.7E1 / 2.0) -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 4.0) -
       p[4] *
           (p[0] * 9.0 - p[1] * (4.5E1 / 2.0) + p[2] * 1.8E1 -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 3.0)) *
      (-3.0 / 4.0);
  grad[1] =
      p[4] *
      (tf - p[0] * p[4] +
       p[4] * (p[0] * (1.1E1 / 2.0) - p[1] * 9.0 + p[2] * (9.0 / 2.0) - p[3]) *
           (1.0 / 2.0) +
       p[4] *
           (p[0] * (9.0 / 2.0) - p[1] * (2.7E1 / 2.0) + p[2] * (2.7E1 / 2.0) -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 4.0) -
       p[4] *
           (p[0] * 9.0 - p[1] * (4.5E1 / 2.0) + p[2] * 1.8E1 -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 3.0)) *
      (-3.0 / 4.0);
  grad[2] =
      (p[0] * (1.0 / 8.0) + p[1] * (3.0 / 8.0) + p[2] * (3.0 / 8.0) +
       p[3] * (1.0 / 8.0)) *
      (tf - p[0] * p[4] +
       p[4] * (p[0] * (1.1E1 / 2.0) - p[1] * 9.0 + p[2] * (9.0 / 2.0) - p[3]) *
           (1.0 / 2.0) +
       p[4] *
           (p[0] * (9.0 / 2.0) - p[1] * (2.7E1 / 2.0) + p[2] * (2.7E1 / 2.0) -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 4.0) -
       p[4] *
           (p[0] * 9.0 - p[1] * (4.5E1 / 2.0) + p[2] * 1.8E1 -
            p[3] * (9.0 / 2.0)) *
           (1.0 / 3.0)) *
      -2.0;
  return grad;
}

double PathOptimizer::fbe(std::vector<double> p) {
  double ret =
      p[4] *
      (p[0] * p[1] * 9.9E1 - p[0] * p[2] * 3.6E1 + p[0] * p[3] * 1.9E1 -
       p[1] * p[2] * 8.1E1 - p[1] * p[3] * 3.6E1 + p[2] * p[3] * 9.9E1 +
       (p[0] * p[0]) * 6.4E1 + (p[1] * p[1]) * 3.24E2 + (p[2] * p[2]) * 3.24E2 +
       (p[3] * p[3]) * 6.4E1) *
      (1.0 / 8.4E2);
  return ret;
}

std::vector<double> PathOptimizer::fbeGrad(std::vector<double> p) {
  std::vector<double> grad(3, 0);
  grad[0] = p[4] *
            (p[0] * 9.9E1 + p[1] * 6.48E2 - p[2] * 8.1E1 - p[3] * 3.6E1) *
            (1.0 / 8.4E2);
  grad[1] = p[4] *
            (p[0] * 3.6E1 + p[1] * 8.1E1 - p[2] * 6.48E2 - p[3] * 9.9E1) *
            (-1.0 / 8.4E2);
  grad[2] = p[0] * p[1] * (3.3E1 / 2.8E2) - p[0] * p[2] * (3.0 / 7.0E1) +
            p[0] * p[3] * (1.9E1 / 8.4E2) - p[1] * p[2] * (2.7E1 / 2.8E2) -
            p[1] * p[3] * (3.0 / 7.0E1) + p[2] * p[3] * (3.3E1 / 2.8E2) +
            (p[0] * p[0]) * (8.0 / 1.05E2) + (p[1] * p[1]) * (2.7E1 / 7.0E1) +
            (p[2] * p[2]) * (2.7E1 / 7.0E1) + (p[3] * p[3]) * (8.0 / 1.05E2);
  return grad;
}

} // namespace planning
