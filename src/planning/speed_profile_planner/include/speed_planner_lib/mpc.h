#ifndef MPC_H
#define MPC_H

#include <cppad/cppad.hpp>
#include <cppad/ipopt/solve.hpp>
#include <eigen3/Eigen/Core>
#include <time.h>
#include <vector>

#include "speed_planner_lib/mpc_config.h"
#include "speed_planner_lib/st_utils.h"
#include "speed_planner_lib/vehicle.h"

/**
 * @file mpc.h
 * @brief The class of MPC.
 */

namespace planning {

/**
 * @class MPC
 * @brief Implementation of model predictive control.
 */

class MPC {
public:
  /**
   * @brief Constructor
   * @param vehicle pointer to ego vehicle
   */
  MPC(Vehicle *vehicle);

  /**
   * @brief Destructor
   */
  ~MPC();

  /**
   * @brief Set MPC configuration.
   * @param config mpc configuration
   */
  void SetConfiguration(MPCConfig *config);

  /**
   * @brief Solve optimization problem.
   * @param st_path vector of cells that represents a corridor in ST space
   * @param speed_map provide a map between s value of frenet and speedlimits
   * @param path optimized path generated by mpc in frenet cordinate (output).
   * @param cost cost of generated path
   * @return True if optimization is successfull; False otherwise.
   */
  void Solve(std::vector<STCell> st_path, std::map<int, double> speed_map,
             std::vector<STConfig> &path, double &cost);

  //  const std::vector<double>& Accs() const;
  //  const std::vector<double>& Throttles() const;
  //  const std::vector<double>& Brakes() const;
  //  const std::vector<double>& Prediction() const;
  //  double Cost();

  //  const std::vector<double> PredictionVelocity() const;

private:
  /**
   * @brief Initialize MPC solver.
   */
  void InitMPC();

  Vehicle *vehicle_m;
  double cost_m;
  std::vector<double> prediction_m;
  MPCConfig *config_m;
  std::vector<double> brakes_m;
  std::vector<double> throttles_m;
  std::vector<double> velocities_m;
  std::vector<double> accelerations_m;
  CppAD::ipopt::solve_result<Dvector> solution_m;

  size_t last_variable_size_m = 0;

  // Loging
  int mpc_itteration_m;
  std::FILE *file_cost_log_m;
  std::FILE *file_mpc_long_log_m;
  std::FILE *file_mpc_short_log_m;

  // bool log_data_m;
  bool cost_log_open_flag_m;
  bool long_log_open_flag_m;
  bool short_log_open_flag_m;
};

} // namespace planning

#endif // MPC_H
